name: Continuous Persistent VPS (Test Mode)

on:
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Enough for test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set hostname
        run: sudo hostnamectl set-hostname girdpixel

      - name: Try restore from latest backup
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: vps-backup-latest
          path: ./backup

      - name: Install prerequisites
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch gh zstd pv pigz

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Restore backup files into system
        run: |
          if [ -f ./backup/backup.tar.gz ]; then
            echo "🗂️ Restoring system files..."
            sudo tar -xzf ./backup/backup.tar.gz -C /
          else
            echo "No previous backup found, starting fresh."
          fi

      - name: Start Tailscale
        run: |
          sudo tailscaled &
          sleep 8
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname=girdpixel || echo "Tailscale already up"

      - name: Ensure girdpixel user exists
        run: |
          if ! id -u girdpixel >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash girdpixel
            echo "girdpixel:girdpixel" | sudo chpasswd
            sudo usermod -aG sudo girdpixel
            echo "girdpixel ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/girdpixel
          fi

      - name: Display connection info
        run: |
          echo "🔗 Tailscale IP:"
          tailscale ip -4 || echo "Tailscale IP not found"
          echo "🌐 tmate info:"
          command -v tmate >/dev/null && tmate display -p '#{tmate_ssh}' || echo "No tmate session"

      - name: Keep VPS alive (Test Mode)
        run: sleep 60  # Only 1 minute for testing

      - name: Create incremental backup
        run: |
          echo "✅ Creating incremental backup..."
          BACKUP_DIR="/opt/vps-backup"
          SNAPSHOT_FILE="$BACKUP_DIR/snapshot.file"
          mkdir -p "$BACKUP_DIR"

          echo "📂 Preparing directories to backup..."
          INCLUDE_DIRS="/etc /var/lib /var/www /opt /home"

          echo "🔄 Creating incremental tar..."
          sudo tar --listed-incremental="$SNAPSHOT_FILE" \
                   --exclude='/var/log' \
                   --exclude='/var/cache' \
                   --exclude='/var/lib/apt/lists' \
                   --exclude='/var/lib/docker' \
                   --exclude='/tmp' \
                   -cf - $INCLUDE_DIRS | pv | pigz -9 > "$BACKUP_DIR/backup.tar.gz"

          echo "✅ Backup complete!"

      - name: Delete old artifact (if any)
        continue-on-error: true
        run: |
          echo "🧹 Deleting old backup artifact..."
          gh api -X GET "repos/${{ github.repository }}/actions/artifacts" --jq '.artifacts[] | select(.name=="vps-backup-latest") | .id' | \
          xargs -r -I{} gh api -X DELETE "repos/${{ github.repository }}/actions/artifacts/{}" || true

      - name: Upload latest backup
        uses: actions/upload-artifact@v4
        with:
          name: vps-backup-latest
          path: /opt/vps-backup/backup.tar.gz
